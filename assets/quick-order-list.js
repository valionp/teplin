/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => {
  // webpackBootstrap
  /******/ var __webpack_modules__ = {
    /***/ "./src/js/components/quick-order-list.js":
      /*!***********************************************!*\
  !*** ./src/js/components/quick-order-list.js ***!
  \***********************************************/
      /***/ () => {
        eval(
          "class QuickOrderListRemoveButton extends HTMLElement {\n  constructor() {\n    super();\n    this.addEventListener('click', (event) => {\n      event.preventDefault();\n      const quickOrderList = this.closest('quick-order-list');\n      quickOrderList.updateQuantity(this.dataset.index, 0);\n    });\n  }\n}\n\ncustomElements.define('quick-order-list-remove-button', QuickOrderListRemoveButton);\n\nclass QuickOrderListRemoveAllButton extends HTMLElement {\n  constructor() {\n    super();\n    const allVariants = Array.from(document.querySelectorAll('[data-variant-id]'));\n    const items = {};\n    let hasVariantsInCart = false;\n    this.quickOrderList = this.closest('quick-order-list');\n\n    allVariants.forEach((variant) => {\n      const cartQty = parseInt(variant.dataset.cartQty);\n      if (cartQty > 0) {\n        hasVariantsInCart = true;\n        items[parseInt(variant.dataset.variantId)] = 0;\n      }\n    });\n\n    if (!hasVariantsInCart) {\n      this.classList.add('hidden');\n    }\n\n    this.actions = {\n      confirm: 'confirm',\n      remove: 'remove',\n      cancel: 'cancel',\n    };\n\n    this.addEventListener('click', (event) => {\n      event.preventDefault();\n      if (this.dataset.action === this.actions.confirm) {\n        this.toggleConfirmation(false, true);\n      } else if (this.dataset.action === this.actions.remove) {\n        this.quickOrderList.updateMultipleQty(items);\n        this.toggleConfirmation(true, false);\n      } else if (this.dataset.action === this.actions.cancel) {\n        this.toggleConfirmation(true, false);\n      }\n    });\n  }\n\n  toggleConfirmation(showConfirmation, showInfo) {\n    this.quickOrderList\n      .querySelector('.quick-order-list-total__confirmation')\n      .classList.toggle('hidden', showConfirmation);\n    this.quickOrderList.querySelector('.quick-order-list-total__info').classList.toggle('hidden', showInfo);\n  }\n}\n\ncustomElements.define('quick-order-list-remove-all-button', QuickOrderListRemoveAllButton);\n\nclass QuickOrderList extends HTMLElement {\n  constructor() {\n    super();\n    this.cart = document.querySelector('cart-drawer');\n    this.actions = {\n      add: 'ADD',\n      update: 'UPDATE',\n    };\n    this.quickOrderListId = 'quick-order-list';\n    this.variantItemStatusElement = document.getElementById('shopping-cart-variant-item-status');\n    const form = this.querySelector('form');\n\n    form.addEventListener('submit', this.onSubmit.bind(this));\n\n    const debouncedOnChange = debounce((event) => {\n      this.onChange(event);\n    }, ON_CHANGE_DEBOUNCE_TIMER);\n    this.addEventListener('change', debouncedOnChange.bind(this));\n  }\n\n  cartUpdateUnsubscriber = undefined;\n\n  onSubmit(event) {\n    event.preventDefault();\n  }\n\n  connectedCallback() {\n    this.cartUpdateUnsubscriber = subscribe(PUB_SUB_EVENTS.cartUpdate, (event) => {\n      if (event.source === this.quickOrderListId) {\n        return;\n      }\n      // If its another section that made the update\n      this.onCartUpdate();\n    });\n    this.sectionId = this.dataset.id;\n  }\n\n  disconnectedCallback() {\n    if (this.cartUpdateUnsubscriber) {\n      this.cartUpdateUnsubscriber();\n    }\n  }\n\n  onChange(event) {\n    const inputValue = parseInt(event.target.value);\n    const cartQuantity = parseInt(event.target.dataset.cartQuantity);\n    const index = event.target.dataset.index;\n    const name = document.activeElement.getAttribute('name');\n\n    const quantity = inputValue - cartQuantity;\n\n    if (cartQuantity > 0) {\n      this.updateQuantity(index, inputValue, name, this.actions.update);\n    } else {\n      this.updateQuantity(index, quantity, name, this.actions.add);\n    }\n  }\n\n  onCartUpdate() {\n    fetch(`${window.location.pathname}?section_id=${this.sectionId}`)\n      .then((response) => response.text())\n      .then((responseText) => {\n        const html = new DOMParser().parseFromString(responseText, 'text/html');\n        const sourceQty = html.querySelector(this.quickOrderListId);\n        this.innerHTML = sourceQty.innerHTML;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  }\n\n  getSectionsToRender() {\n    return [\n      {\n        id: this.quickOrderListId,\n        section: document.getElementById(this.quickOrderListId).dataset.id,\n        selector: '.js-contents',\n      },\n      {\n        id: 'cart-icon-bubble',\n        section: 'cart-icon-bubble',\n        selector: '.shopify-section',\n      },\n      {\n        id: 'quick-order-list-live-region-text',\n        section: 'cart-live-region-text',\n        selector: '.shopify-section',\n      },\n      {\n        id: 'quick-order-list-total',\n        section: document.getElementById(this.quickOrderListId).dataset.id,\n        selector: '.quick-order-list__total',\n      },\n      {\n        id: 'CartDrawer',\n        selector: '#CartDrawer',\n        section: 'cart-drawer',\n      },\n    ];\n  }\n\n  renderSections(parsedState) {\n    this.getSectionsToRender().forEach((section) => {\n      const sectionElement = document.getElementById(section.id);\n      if (sectionElement && sectionElement.parentElement && sectionElement.parentElement.classList.contains('drawer')) {\n        parsedState.items.length > 0\n          ? sectionElement.parentElement.classList.remove('is-empty')\n          : sectionElement.parentElement.classList.add('is-empty');\n\n        setTimeout(() => {\n          document.querySelector('#CartDrawer-Overlay').addEventListener('click', this.cart.close.bind(this.cart));\n        });\n      }\n      const elementToReplace =\n        sectionElement && sectionElement.querySelector(section.selector)\n          ? sectionElement.querySelector(section.selector)\n          : sectionElement;\n      if (elementToReplace) {\n        elementToReplace.innerHTML = this.getSectionInnerHTML(parsedState.sections[section.section], section.selector);\n      }\n    });\n  }\n\n  updateMultipleQty(items) {\n    this.querySelector('.variant-remove-total .loading__spinner').classList.remove('hidden');\n\n    const body = JSON.stringify({\n      updates: items,\n      sections: this.getSectionsToRender().map((section) => section.section),\n      sections_url: window.location.pathname,\n    });\n\n    this.updateMessage();\n    this.setErrorMessage();\n\n    fetch(`${routes.cart_update_url}`, { ...fetchConfig(), ...{ body } })\n      .then((response) => {\n        return response.text();\n      })\n      .then((state) => {\n        const parsedState = JSON.parse(state);\n        this.renderSections(parsedState);\n      })\n      .catch(() => {\n        this.setErrorMessage(window.cartStrings.error);\n      })\n      .finally(() => {\n        this.querySelector('.variant-remove-total .loading__spinner').classList.add('hidden');\n      });\n  }\n\n  updateQuantity(id, quantity, name, action) {\n    this.toggleLoading(id, true);\n\n    let routeUrl = routes.cart_change_url;\n    let body = JSON.stringify({\n      quantity,\n      id,\n      sections: this.getSectionsToRender().map((section) => section.section),\n      sections_url: window.location.pathname,\n    });\n    let fetchConfigType;\n    if (action === this.actions.add) {\n      fetchConfigType = 'javascript';\n      routeUrl = routes.cart_add_url;\n      body = JSON.stringify({\n        items: [\n          {\n            quantity: parseInt(quantity),\n            id: parseInt(id),\n          },\n        ],\n        sections: this.getSectionsToRender().map((section) => section.section),\n        sections_url: window.location.pathname,\n      });\n    }\n\n    this.updateMessage();\n    this.setErrorMessage();\n\n    fetch(`${routeUrl}`, { ...fetchConfig(fetchConfigType), ...{ body } })\n      .then((response) => {\n        return response.text();\n      })\n      .then((state) => {\n        const parsedState = JSON.parse(state);\n        const quantityElement = document.getElementById(`Quantity-${id}`);\n        const items = document.querySelectorAll('.variant-item');\n\n        if (parsedState.description || parsedState.errors) {\n          const variantItem = document.querySelector(\n            `[id^=\"Variant-${id}\"] .variant-item__totals.small-hide .loading__spinner`\n          );\n          variantItem.classList.add('loading__spinner--error');\n          this.resetQuantityInput(id, quantityElement);\n          if (parsedState.errors) {\n            this.updateLiveRegions(id, parsedState.errors);\n          } else {\n            this.updateLiveRegions(id, parsedState.description);\n          }\n          return;\n        }\n\n        this.classList.toggle('is-empty', parsedState.item_count === 0);\n\n        this.renderSections(parsedState);\n\n        let hasError = false;\n\n        const currentItem = parsedState.items.find((item) => item.variant_id === parseInt(id));\n        const updatedValue = currentItem ? currentItem.quantity : undefined;\n        if (updatedValue && updatedValue !== quantity) {\n          this.updateError(updatedValue, id);\n          hasError = true;\n        }\n\n        const variantItem = document.getElementById(`Variant-${id}`);\n        if (variantItem && variantItem.querySelector(`[name=\"${name}\"]`)) {\n          variantItem.querySelector(`[name=\"${name}\"]`).focus();\n        }\n        publish(PUB_SUB_EVENTS.cartUpdate, { source: this.quickOrderListId, cartData: parsedState });\n\n        if (hasError) {\n          this.updateMessage();\n        } else if (action === this.actions.add) {\n          this.updateMessage(parseInt(quantity));\n        } else if (action === this.actions.update) {\n          this.updateMessage(parseInt(quantity - quantityElement.dataset.cartQuantity));\n        } else {\n          this.updateMessage(-parseInt(quantityElement.dataset.cartQuantity));\n        }\n      })\n      .catch((error) => {\n        this.querySelectorAll('.loading__spinner').forEach((overlay) => overlay.classList.add('hidden'));\n        this.resetQuantityInput(id);\n        console.error(error);\n        this.setErrorMessage(window.cartStrings.error);\n      })\n      .finally(() => {\n        this.toggleLoading(id);\n      });\n  }\n\n  resetQuantityInput(id, quantityElement) {\n    const input = quantityElement ?? document.getElementById(`Quantity-${id}`);\n    input.value = input.getAttribute('value');\n  }\n\n  setErrorMessage(message = null) {\n    this.errorMessageTemplate =\n      this.errorMessageTemplate ??\n      document.getElementById(`QuickOrderListErrorTemplate-${this.sectionId}`).cloneNode(true);\n    const errorElements = document.querySelectorAll('.quick-order-list-error');\n\n    errorElements.forEach((errorElement) => {\n      errorElement.innerHTML = '';\n      if (!message) return;\n      const updatedMessageElement = this.errorMessageTemplate.cloneNode(true);\n      updatedMessageElement.content.querySelector('.quick-order-list-error-message').innerText = message;\n      errorElement.appendChild(updatedMessageElement.content);\n    });\n  }\n\n  updateMessage(quantity = null) {\n    const messages = this.querySelectorAll('.quick-order-list__message-text');\n    const icons = this.querySelectorAll('.quick-order-list__message-icon');\n\n    if (quantity === null || isNaN(quantity)) {\n      messages.forEach((message) => (message.innerHTML = ''));\n      icons.forEach((icon) => icon.classList.add('hidden'));\n      return;\n    }\n\n    const isQuantityNegative = quantity < 0;\n    const absQuantity = Math.abs(quantity);\n\n    const textTemplate = isQuantityNegative\n      ? absQuantity === 1\n        ? window.quickOrderListStrings.itemRemoved\n        : window.quickOrderListStrings.itemsRemoved\n      : quantity === 1\n      ? window.quickOrderListStrings.itemAdded\n      : window.quickOrderListStrings.itemsAdded;\n\n    messages.forEach((msg) => (msg.innerHTML = textTemplate.replace('[quantity]', absQuantity)));\n\n    if (!isQuantityNegative) {\n      icons.forEach((i) => i.classList.remove('hidden'));\n    }\n  }\n\n  updateError(updatedValue, id) {\n    let message = '';\n    if (typeof updatedValue === 'undefined') {\n      message = window.cartStrings.error;\n    } else {\n      message = window.cartStrings.quantityError.replace('[quantity]', updatedValue);\n    }\n    this.updateLiveRegions(id, message);\n  }\n\n  updateLiveRegions(id, message) {\n    const variantItemErrorDesktop = document.getElementById(`Quick-order-list-item-error-desktop-${id}`);\n    const variantItemErrorMobile = document.getElementById(`Quick-order-list-item-error-mobile-${id}`);\n    if (variantItemErrorDesktop) {\n      variantItemErrorDesktop.querySelector('.variant-item__error-text').innerHTML = message;\n      variantItemErrorDesktop.closest('tr').classList.remove('hidden');\n    }\n    if (variantItemErrorMobile) variantItemErrorMobile.querySelector('.variant-item__error-text').innerHTML = message;\n\n    this.variantItemStatusElement.setAttribute('aria-hidden', true);\n\n    const cartStatus = document.getElementById('quick-order-list-live-region-text');\n    cartStatus.setAttribute('aria-hidden', false);\n\n    setTimeout(() => {\n      cartStatus.setAttribute('aria-hidden', true);\n    }, 1000);\n  }\n\n  getSectionInnerHTML(html, selector) {\n    return new DOMParser().parseFromString(html, 'text/html').querySelector(selector).innerHTML;\n  }\n\n  toggleLoading(id, enable) {\n    const quickOrderList = document.getElementById(this.quickOrderListId);\n    const quickOrderListItems = this.querySelectorAll(`#Variant-${id} .loading__spinner`);\n\n    if (enable) {\n      quickOrderList.classList.add('quick-order-list__container--disabled');\n      [...quickOrderListItems].forEach((overlay) => overlay.classList.remove('hidden'));\n      document.activeElement.blur();\n      this.variantItemStatusElement.setAttribute('aria-hidden', false);\n    } else {\n      quickOrderList.classList.remove('quick-order-list__container--disabled');\n      quickOrderListItems.forEach((overlay) => overlay.classList.add('hidden'));\n    }\n  }\n}\n\ncustomElements.define('quick-order-list', QuickOrderList);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/components/quick-order-list.js\n"
        );

        /***/
      },

    /******/
  };
  /************************************************************************/
  /******/
  /******/ // startup
  /******/ // Load entry module and return exports
  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.
  /******/ var __webpack_exports__ = {};
  /******/ __webpack_modules__["./src/js/components/quick-order-list.js"]();
  /******/
  /******/
})();
